<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
   http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 自定义realm -->
    <bean id="myRealm" class="realm.MyRealm"/>
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    	<property name="realm" ref="myRealm"/>
    	<!-- 定义要使用的session管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
    	
    </bean>
    <!-- shrio过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    	<!-- Shiro的核心安全接口,这个属性是必须的 -->
    	<property name="securityManager" ref="securityManager"/>
    	<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
    	<property name="loginUrl" value="/login.jsp"/>
    	<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->  
    	<property name="successUrl" value="/success.jsp"/> 
    	<!-- 用户访问未对其授权的资源时,所显示的连接 -->  
    	<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->  
    	<!-- 权限认证失败，则跳转到指定页面 -->
    	<property name="unauthorizedUrl" value="/login.jsp"/>
    	<!-- Shiro连接约束配置,即过滤链的定义 自上而下，从左到右 -->
    	<property name="filterChainDefinitions">
    		<value>
    			/static/** = anon
    			/login = anon 
    			/guest = anon
    			/api/guest/**=anon 
    			/logout=logout
    			<!-- anon 任何人都可以访问 -->
    			<!-- 表示用户必需已通过认证,并拥有admin角色才可以正常发起'/admin'请求 -->
    			<!-- authc 必须登录之后才能访问 不包括remember me，每次序重新认证 -->
    			<!-- user表示用户不一定已通过认证,只要曾被Shiro记住过登录状态的用户就可以正常发起请求,比如rememberMe -->
    			/api/admin/**=authc,roles[admin]
    			
    			<!-- perms[]需要权限 -->
    			<!-- /teacher=perms["user:create"]  -->
    			/** = anon
    		</value>
    	</property>
    </bean>
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 开启Shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
    </bean>
    <!-- 会话Session ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	<!-- 配置Session DAO的操作处理 指的是你的会话的缓存位置，本次暂时将所有的会话数据保存在内存里面--> 
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO"> 
    	<!-- 设置session缓存的名字，这个名字可以任意 --> 
    	<property name="activeSessionsCacheName" value="shiro-activeSessionCache"/> 
   		<!-- 定义该Session DAO操作中所使用的ID生成器 --> 
    	<property name="sessionIdGenerator" ref="sessionIdGenerator"/> 
	</bean>
	<!-- 配置需要向Cookie中保存数据的配置模版 --> 
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie"> 
	    <!-- 在Tomcat运行下默认使用的Cookie的名字为JSESSIONID --> 
	    <constructor-arg value="mldn-session-id"/> 
	    <!-- 保证该系统不会受到跨域的脚本操作供给 --> 
	    <property name="httpOnly" value="true"/> 
	    <!-- 定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 --> 
	    <property name="maxAge" value="-1"/> 
	</bean>
	<!-- 定义会话管理器的操作 -->
    <bean id="sessionManager"
        class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 定义要使用的无效的Session定时调度器 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 需要让此session可以使用该定时调度器进行检测 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 定义Session可以进行序列化的工具类 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!-- 定义sessionIdCookie模版可以进行操作的启用 -->
        <property name="sessionIdCookieEnabled" value="true"/>
    </bean> 
	<!-- 配置session的定时验证检测程序类，以让无效的session释放 -->
    <bean id="sessionValidationScheduler"
        class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!-- 设置session的失效扫描间隔，单位为毫秒 -->
        <property name="sessionValidationInterval" value="900000"/>
        <!-- 随后还需要定义有一个会话管理器的程序类的引用 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean> 

</beans>